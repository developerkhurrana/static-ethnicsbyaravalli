import { NextRequest, NextResponse } from "next/server";
import { requireAdminAuth } from "@/lib/admin-auth";
import PurchaseOrder from "@/models/PurchaseOrder";
import dbConnect from "@/lib/mongodb";
import puppeteer from "puppeteer";
import Product from "@/models/Product";

export const runtime = "nodejs";

export const GET = requireAdminAuth(async (
  request: NextRequest,
) => {
  await dbConnect();

  const { searchParams } = new URL(request.url);
  const poId = searchParams.get('poId');

  if (!poId) {
    return new NextResponse('Missing poId', { status: 400 });
  }
  const po = await PurchaseOrder.findById(poId);
  if (!po) {
    return new NextResponse('Purchase order not found', { status: 404 });
  }

  // Fetch product images for each item
  const productImages: Record<string, string> = {};
  for (const item of po.items) {
    const product = await Product.findOne({ itemCode: item.itemCode });
    if (product && product.images && product.images.length > 0) {
      const primaryImg = product.images.find((img: any) => img.isPrimary) || product.images[0];
      productImages[item.itemCode] = primaryImg.url;
    } else {
      productImages[item.itemCode] = "";
    }
  }

  // Render a professional HTML template for the PO
  const html = `
    <html>
      <head>
        <title>Purchase Order #${po.poNumber}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          h1 { color: #333; }
          .section { margin-bottom: 24px; }
          .items-table { width: 100%; border-collapse: collapse; margin-top: 16px; }
          .items-table th, .items-table td { border: 1px solid #ccc; padding: 8px; }
          .items-table th { background: #f5f5f5; }
          .logo { width: 120px; height: auto; margin-bottom: 18px; }
          .product-img { width: 80px; height: auto; border-radius: 6px; border: 1px solid #eee; }
          .disclaimer { margin-top: 40px; font-size: 13px; color: #a00; font-style: italic; }
          .brand-heading { text-align: center; font-size: 2rem; font-weight: bold; letter-spacing: 2px; margin-bottom: 18px; color: #222; }
          .brand-logo-wrap { text-align: center; }
          .logo { width: 120px; height: auto; margin-bottom: 8px; display: inline-block; }
        </style>
      </head>
      <body>
        
        <div class="brand-heading">Ethnics by Aravalli</div>
        <h1>Purchase Order #${po.poNumber}</h1>
        <div class="section">
          <strong>Retailer:</strong> ${po.retailerInfo.businessName} (${po.retailerInfo.contactPerson})<br/>
          <strong>Phone:</strong> ${po.retailerInfo.phoneNumber}<br/>
          <strong>Address:</strong> ${po.retailerInfo.address.street}, ${po.retailerInfo.address.city}, ${po.retailerInfo.address.state} - ${po.retailerInfo.address.pincode}, ${po.retailerInfo.address.country}
        </div>
        <div class="section">
          <strong>Status:</strong> ${po.status}<br/>
          <strong>Generated By:</strong> ${po.generatedBy}<br/>
          <strong>Created:</strong> ${new Date(po.createdAt).toLocaleString()}<br/>
          ${po.sentAt ? `<strong>Sent:</strong> ${new Date(po.sentAt).toLocaleString()}<br/>` : ""}
        </div>
        <div class="section">
          <strong>Order Items:</strong>
          <table class="items-table">
            <thead>
              <tr>
                <th>Image</th>
                <th>Item Name</th>
                <th>Item Code</th>
                <th>Color</th>
                <th>Fabric</th>
                <th>Sets</th>
                <th>Total Pcs</th>
                <th>Amount</th>
              </tr>
            </thead>
            <tbody>
              ${po.items.map((item: any) => `
                <tr>
                  <td>${productImages[item.itemCode] ? `<img src="${productImages[item.itemCode]}" class="product-img" alt="${item.itemName}"/>` : ""}</td>
                  <td>${item.itemName}</td>
                  <td>${item.itemCode}</td>
                  <td>${item.color}</td>
                  <td>${item.fabric}</td>
                  <td>${item.quantitySets}</td>
                  <td>${item.totalPcs}</td>
                  <td>₹${item.totalAmount}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        <div class="section">
          <strong>Order Summary:</strong><br/>
          Total Styles: ${[...new Set(po.items.map((item: any) => item.itemCode))].length}<br/>
          Total Sets: ${po.poSummary.totalSets}<br/>
          Total Pieces: ${po.poSummary.totalPcs}<br/>
          <strong>Total Amount: ₹${po.poSummary.totalAmountAfterGST.toLocaleString()}</strong>
        </div>
        <div class="disclaimer">
          This PO is only for reference purpose only. <i>Not an official document</i>. Tax invoice will be generated post payment.
        </div>
      </body>
    </html>
  `;
  // Launch Puppeteer and generate PDF
  const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
  const page = await browser.newPage();
  await page.setContent(html, { waitUntil: 'networkidle0' });
  const pdfBuffer = await page.pdf({ format: 'A4', printBackground: true });
  await browser.close();
  return new NextResponse(pdfBuffer, {
    status: 200,
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename=PO_${po.poNumber}.pdf`,
    },
  });
}); 