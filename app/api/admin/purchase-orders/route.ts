import { NextRequest, NextResponse } from "next/server";
import { requireAdminAuth } from "@/lib/admin-auth";
import dbConnect from "@/lib/mongodb";
import { ensureModelsLoaded } from "@/lib/models";
import PurchaseOrder from "@/models/PurchaseOrder";
import Order from "@/models/Order";
import puppeteer from "puppeteer";

export const GET = requireAdminAuth(async (
  request: NextRequest,
) => {
  ensureModelsLoaded();
  await dbConnect();

  const { searchParams, pathname } = new URL(request.url);
  const poId = searchParams.get('poId');
  const orderId = searchParams.get('orderId');

  // PDF download endpoint
  if (pathname.endsWith('/pdf')) {
    if (!poId) {
      return new NextResponse('Missing poId', { status: 400 });
    }
    const po = await PurchaseOrder.findById(poId);
    if (!po) {
      return new NextResponse('Purchase order not found', { status: 404 });
    }
    // Render a simple HTML template for the PO
    const html = `
      <html>
        <head>
          <title>Purchase Order #${po.poNumber}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; }
            .section { margin-bottom: 24px; }
            .items-table { width: 100%; border-collapse: collapse; margin-top: 16px; }
            .items-table th, .items-table td { border: 1px solid #ccc; padding: 8px; }
            .items-table th { background: #f5f5f5; }
          </style>
        </head>
        <body>
          <h1>Purchase Order #${po.poNumber}</h1>
          <div class="section">
            <strong>Retailer:</strong> ${po.retailerInfo.businessName} (${po.retailerInfo.contactPerson})<br/>
            <strong>Phone:</strong> ${po.retailerInfo.phoneNumber}<br/>
            <strong>Address:</strong> ${po.retailerInfo.address.street}, ${po.retailerInfo.address.city}, ${po.retailerInfo.address.state} - ${po.retailerInfo.address.pincode}, ${po.retailerInfo.address.country}
          </div>
          <div class="section">
            <strong>Status:</strong> ${po.status}<br/>
            <strong>Generated By:</strong> ${po.generatedBy}<br/>
            <strong>Created:</strong> ${new Date(po.createdAt).toLocaleString()}<br/>
            ${po.sentAt ? `<strong>Sent:</strong> ${new Date(po.sentAt).toLocaleString()}<br/>` : ""}
          </div>
          <div class="section">
            <strong>Order Items:</strong>
            <table class="items-table">
              <thead>
                <tr>
                  <th>Item Name</th>
                  <th>Item Code</th>
                  <th>Color</th>
                  <th>Fabric</th>
                  <th>Sets</th>
                  <th>Total Pcs</th>
                  <th>Amount</th>
                </tr>
              </thead>
              <tbody>
                ${po.items.map((item: any) => `
                  <tr>
                    <td>${item.itemName}</td>
                    <td>${item.itemCode}</td>
                    <td>${item.color}</td>
                    <td>${item.fabric}</td>
                    <td>${item.quantitySets}</td>
                    <td>${item.totalPcs}</td>
                    <td>₹${item.totalAmount}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
          <div class="section">
            <strong>Order Summary:</strong><br/>
            Total Sets: ${po.poSummary.totalSets}<br/>
            Total Pieces: ${po.poSummary.totalPcs}<br/>
            Subtotal: ₹${po.poSummary.totalAmountBeforeGST.toLocaleString()}<br/>
            GST (${po.poSummary.gstRate}%): ₹${po.poSummary.gstAmount.toLocaleString()}<br/>
            <strong>Total Amount: ₹${po.poSummary.totalAmountAfterGST.toLocaleString()}</strong>
          </div>
          <div class="section">
            <strong>Terms & Conditions:</strong><br/>
            Payment Terms: ${po.terms.paymentTerms}<br/>
            Delivery Terms: ${po.terms.deliveryTerms}<br/>
            Warranty: ${po.terms.warranty}<br/>
          </div>
        </body>
      </html>
    `;
    // Launch Puppeteer and generate PDF
    const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdfBuffer = await page.pdf({ format: 'A4', printBackground: true });
    await browser.close();
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename=PO_${po.poNumber}.pdf`,
      },
    });
  }

  if (poId) {
    const po = await PurchaseOrder.findById(poId);
    if (!po) {
      return NextResponse.json({ error: 'Purchase order not found' }, { status: 404 });
    }
    return NextResponse.json({ purchaseOrder: po });
  }

  if (orderId) {
    const pos = await PurchaseOrder.find({ orderId });
    if (!pos || pos.length === 0) {
      return NextResponse.json({ error: 'No purchase orders found for this order' }, { status: 404 });
    }
    return NextResponse.json({ purchaseOrders: pos });
  }

  // Existing logic for listing all POs
  try {
    // Ensure all models are loaded
    ensureModelsLoaded();

    await dbConnect();

    const purchaseOrders = await PurchaseOrder.find({})
      .populate("orderId", "orderNumber")
      .sort({ createdAt: -1 });

    return NextResponse.json({
      success: true,
      purchaseOrders: purchaseOrders.map(po => ({
        _id: po._id,
        poNumber: po.poNumber,
        orderId: po.orderId._id,
        retailerInfo: {
          businessName: po.retailerInfo.businessName,
          contactPerson: po.retailerInfo.contactPerson,
          phoneNumber: po.retailerInfo.phoneNumber,
        },
        poSummary: po.poSummary,
        status: po.status,
        generatedBy: po.generatedBy,
        sentAt: po.sentAt,
        createdAt: po.createdAt,
        updatedAt: po.updatedAt,
      })),
    });
  } catch (error) {
    console.error("Admin purchase orders API error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
});

export const PATCH = requireAdminAuth(async (
  request: NextRequest,
) => {
  ensureModelsLoaded();
  await dbConnect();

  const { searchParams } = new URL(request.url);
  const poId = searchParams.get('poId');
  const action = searchParams.get('action');

  if (!poId) {
    return NextResponse.json({ error: 'Purchase order ID is required' }, { status: 400 });
  }

  if (action === 'mark-sent') {
    const po = await PurchaseOrder.findById(poId);
    if (!po) {
      return NextResponse.json({ error: 'Purchase order not found' }, { status: 404 });
    }

    po.status = 'SENT';
    po.sentAt = new Date();
    await po.save();

    return NextResponse.json({ success: true, purchaseOrder: po });
  }

  if (action === 'mark-acknowledged') {
    const po = await PurchaseOrder.findById(poId);
    if (!po) {
      return NextResponse.json({ error: 'Purchase order not found' }, { status: 404 });
    }
    po.status = 'ACKNOWLEDGED';
    po.updatedAt = new Date();
    await po.save();
    return NextResponse.json({ success: true, purchaseOrder: po });
  }

  return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
});

export const DELETE = requireAdminAuth(async (
  request: NextRequest,
) => {
  ensureModelsLoaded();
  await dbConnect();

  const { searchParams } = new URL(request.url);
  const poId = searchParams.get('poId');
  const action = searchParams.get('action');

  if (!poId) {
    return NextResponse.json({ error: 'Purchase order ID is required' }, { status: 400 });
  }

  if (action === 'delete') {
    try {
      // Find the PO to get the orderId
      const po = await PurchaseOrder.findById(poId);
      if (!po) {
        return NextResponse.json({ error: 'Purchase order not found' }, { status: 404 });
      }

      // Delete the PO
      await PurchaseOrder.findByIdAndDelete(poId);

      // Update the order status back to APPROVED
      await Order.findByIdAndUpdate(po.orderId, { status: 'APPROVED' });

      return NextResponse.json({ 
        success: true, 
        message: 'Purchase order deleted successfully' 
      });
    } catch (error) {
      console.error('Error deleting purchase order:', error);
      return NextResponse.json({ 
        error: 'Failed to delete purchase order' 
      }, { status: 500 });
    }
  }

  return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
}); 